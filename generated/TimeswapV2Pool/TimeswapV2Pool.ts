// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddFees extends ethereum.Event {
  get params(): AddFees__Params {
    return new AddFees__Params(this);
  }
}

export class AddFees__Params {
  _event: AddFees;

  constructor(event: AddFees) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get long0Fees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get long1Fees(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get shortFees(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get long0To(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get long1To(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get shortTo(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get liquidityAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get long0Amount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class CollectProtocolFees extends ethereum.Event {
  get params(): CollectProtocolFees__Params {
    return new CollectProtocolFees__Params(this);
  }
}

export class CollectProtocolFees__Params {
  _event: CollectProtocolFees;

  constructor(event: CollectProtocolFees) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get long0To(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get long1To(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get shortTo(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get long0Amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class CollectTransactionFee extends ethereum.Event {
  get params(): CollectTransactionFee__Params {
    return new CollectTransactionFee__Params(this);
  }
}

export class CollectTransactionFee__Params {
  _event: CollectTransactionFee;

  constructor(event: CollectTransactionFee) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get long0To(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get long1To(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get shortTo(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get long0Amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Deleverage extends ethereum.Event {
  get params(): Deleverage__Params {
    return new Deleverage__Params(this);
  }
}

export class Deleverage__Params {
  _event: Deleverage;

  constructor(event: Deleverage) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get long0Amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Leverage extends ethereum.Event {
  get params(): Leverage__Params {
    return new Leverage__Params(this);
  }
}

export class Leverage__Params {
  _event: Leverage;

  constructor(event: Leverage) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get long0To(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get long1To(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get long0Amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get liquidityAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get long0Amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Rebalance extends ethereum.Event {
  get params(): Rebalance__Params {
    return new Rebalance__Params(this);
  }
}

export class Rebalance__Params {
  _event: Rebalance;

  constructor(event: Rebalance) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get isLong0ToLong1(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get long0Amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class TransferFees extends ethereum.Event {
  get params(): TransferFees__Params {
    return new TransferFees__Params(this);
  }
}

export class TransferFees__Params {
  _event: TransferFees;

  constructor(event: TransferFees) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get long0Fees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get long1Fees(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get shortFees(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class TransferLiquidity extends ethereum.Event {
  get params(): TransferLiquidity__Params {
    return new TransferLiquidity__Params(this);
  }
}

export class TransferLiquidity__Params {
  _event: TransferLiquidity;

  constructor(event: TransferLiquidity) {
    this._event = event;
  }

  get strike(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get liquidityAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TimeswapV2Pool__addFeesInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get long0Fees(): BigInt {
    return this[3].toBigInt();
  }

  get long1Fees(): BigInt {
    return this[4].toBigInt();
  }

  get shortFees(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class TimeswapV2Pool__burnResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getLiquidityAmount(): BigInt {
    return this.value0;
  }

  getLong0Amount(): BigInt {
    return this.value1;
  }

  getLong1Amount(): BigInt {
    return this.value2;
  }

  getShortAmount(): BigInt {
    return this.value3;
  }

  getData(): Bytes {
    return this.value4;
  }
}

export class TimeswapV2Pool__burnInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get transaction(): i32 {
    return this[5].toI32();
  }

  get delta(): BigInt {
    return this[6].toBigInt();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class TimeswapV2Pool__burn1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getLiquidityAmount(): BigInt {
    return this.value0;
  }

  getLong0Amount(): BigInt {
    return this.value1;
  }

  getLong1Amount(): BigInt {
    return this.value2;
  }

  getShortAmount(): BigInt {
    return this.value3;
  }

  getData(): Bytes {
    return this.value4;
  }
}

export class TimeswapV2Pool__burn1InputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get transaction(): i32 {
    return this[5].toI32();
  }

  get delta(): BigInt {
    return this[6].toBigInt();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class TimeswapV2Pool__collectProtocolFeesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }

  getShortAmount(): BigInt {
    return this.value2;
  }
}

export class TimeswapV2Pool__collectProtocolFeesInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get long0Requested(): BigInt {
    return this[5].toBigInt();
  }

  get long1Requested(): BigInt {
    return this[6].toBigInt();
  }

  get shortRequested(): BigInt {
    return this[7].toBigInt();
  }
}

export class TimeswapV2Pool__collectTransactionFeesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }

  getShortAmount(): BigInt {
    return this.value2;
  }
}

export class TimeswapV2Pool__collectTransactionFeesInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get long0Requested(): BigInt {
    return this[5].toBigInt();
  }

  get long1Requested(): BigInt {
    return this[6].toBigInt();
  }

  get shortRequested(): BigInt {
    return this[7].toBigInt();
  }
}

export class TimeswapV2Pool__deleverageResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }

  getShortAmount(): BigInt {
    return this.value2;
  }

  getData(): Bytes {
    return this.value3;
  }
}

export class TimeswapV2Pool__deleverageInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class TimeswapV2Pool__deleverage1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }

  getShortAmount(): BigInt {
    return this.value2;
  }

  getData(): Bytes {
    return this.value3;
  }
}

export class TimeswapV2Pool__deleverage1InputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class TimeswapV2Pool__feeGrowthResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLong0FeeGrowth(): BigInt {
    return this.value0;
  }

  getLong1FeeGrowth(): BigInt {
    return this.value1;
  }

  getShortFeeGrowth(): BigInt {
    return this.value2;
  }
}

export class TimeswapV2Pool__feesEarnedOfResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLong0Fees(): BigInt {
    return this.value0;
  }

  getLong1Fees(): BigInt {
    return this.value1;
  }

  getShortFees(): BigInt {
    return this.value2;
  }
}

export class TimeswapV2Pool__getByIndexResultValue0Struct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }
}

export class TimeswapV2Pool__leverageResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }

  getShortAmount(): BigInt {
    return this.value2;
  }

  getData(): Bytes {
    return this.value3;
  }
}

export class TimeswapV2Pool__leverageInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get transaction(): i32 {
    return this[4].toI32();
  }

  get delta(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class TimeswapV2Pool__leverage1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }

  getShortAmount(): BigInt {
    return this.value2;
  }

  getData(): Bytes {
    return this.value3;
  }
}

export class TimeswapV2Pool__leverage1InputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get transaction(): i32 {
    return this[4].toI32();
  }

  get delta(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class TimeswapV2Pool__mintResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getLiquidityAmount(): BigInt {
    return this.value0;
  }

  getLong0Amount(): BigInt {
    return this.value1;
  }

  getLong1Amount(): BigInt {
    return this.value2;
  }

  getShortAmount(): BigInt {
    return this.value3;
  }

  getData(): Bytes {
    return this.value4;
  }
}

export class TimeswapV2Pool__mintInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class TimeswapV2Pool__mint1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }

  getLiquidityAmount(): BigInt {
    return this.value0;
  }

  getLong0Amount(): BigInt {
    return this.value1;
  }

  getLong1Amount(): BigInt {
    return this.value2;
  }

  getShortAmount(): BigInt {
    return this.value3;
  }

  getData(): Bytes {
    return this.value4;
  }
}

export class TimeswapV2Pool__mint1InputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class TimeswapV2Pool__protocolFeesEarnedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLong0ProtocolFees(): BigInt {
    return this.value0;
  }

  getLong1ProtocolFees(): BigInt {
    return this.value1;
  }

  getShortProtocolFees(): BigInt {
    return this.value2;
  }
}

export class TimeswapV2Pool__rebalanceResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }

  getData(): Bytes {
    return this.value2;
  }
}

export class TimeswapV2Pool__rebalanceInputParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get isLong0ToLong1(): boolean {
    return this[3].toBoolean();
  }

  get transaction(): i32 {
    return this[4].toI32();
  }

  get delta(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class TimeswapV2Pool__totalLongBalanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }
}

export class TimeswapV2Pool__totalLongBalanceAdjustFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLong0Amount(): BigInt {
    return this.value0;
  }

  getLong1Amount(): BigInt {
    return this.value1;
  }
}

export class TimeswapV2Pool__totalPositionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLongAmount(): BigInt {
    return this.value0;
  }

  getShortAmount(): BigInt {
    return this.value1;
  }
}

export class TimeswapV2Pool extends ethereum.SmartContract {
  static bind(address: Address): TimeswapV2Pool {
    return new TimeswapV2Pool("TimeswapV2Pool", address);
  }

  addFees(param: TimeswapV2Pool__addFeesInputParamStruct): Bytes {
    let result = super.call(
      "addFees",
      "addFees((uint256,uint256,address,uint256,uint256,uint256,bytes)):(bytes)",
      [ethereum.Value.fromTuple(param)]
    );

    return result[0].toBytes();
  }

  try_addFees(
    param: TimeswapV2Pool__addFeesInputParamStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addFees",
      "addFees((uint256,uint256,address,uint256,uint256,uint256,bytes)):(bytes)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  burn(
    param: TimeswapV2Pool__burnInputParamStruct,
    durationForward: BigInt
  ): TimeswapV2Pool__burnResult {
    let result = super.call(
      "burn",
      "burn((uint256,uint256,address,address,address,uint8,uint256,bytes),uint96):(uint160,uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );

    return new TimeswapV2Pool__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes()
    );
  }

  try_burn(
    param: TimeswapV2Pool__burnInputParamStruct,
    durationForward: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn((uint256,uint256,address,address,address,uint8,uint256,bytes),uint96):(uint160,uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__burnResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes()
      )
    );
  }

  burn1(
    param: TimeswapV2Pool__burn1InputParamStruct
  ): TimeswapV2Pool__burn1Result {
    let result = super.call(
      "burn",
      "burn((uint256,uint256,address,address,address,uint8,uint256,bytes)):(uint160,uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );

    return new TimeswapV2Pool__burn1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes()
    );
  }

  try_burn1(
    param: TimeswapV2Pool__burn1InputParamStruct
  ): ethereum.CallResult<TimeswapV2Pool__burn1Result> {
    let result = super.tryCall(
      "burn",
      "burn((uint256,uint256,address,address,address,uint8,uint256,bytes)):(uint160,uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__burn1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes()
      )
    );
  }

  collectProtocolFees(
    param: TimeswapV2Pool__collectProtocolFeesInputParamStruct
  ): TimeswapV2Pool__collectProtocolFeesResult {
    let result = super.call(
      "collectProtocolFees",
      "collectProtocolFees((uint256,uint256,address,address,address,uint256,uint256,uint256)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(param)]
    );

    return new TimeswapV2Pool__collectProtocolFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_collectProtocolFees(
    param: TimeswapV2Pool__collectProtocolFeesInputParamStruct
  ): ethereum.CallResult<TimeswapV2Pool__collectProtocolFeesResult> {
    let result = super.tryCall(
      "collectProtocolFees",
      "collectProtocolFees((uint256,uint256,address,address,address,uint256,uint256,uint256)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__collectProtocolFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  collectTransactionFees(
    param: TimeswapV2Pool__collectTransactionFeesInputParamStruct
  ): TimeswapV2Pool__collectTransactionFeesResult {
    let result = super.call(
      "collectTransactionFees",
      "collectTransactionFees((uint256,uint256,address,address,address,uint256,uint256,uint256)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(param)]
    );

    return new TimeswapV2Pool__collectTransactionFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_collectTransactionFees(
    param: TimeswapV2Pool__collectTransactionFeesInputParamStruct
  ): ethereum.CallResult<TimeswapV2Pool__collectTransactionFeesResult> {
    let result = super.tryCall(
      "collectTransactionFees",
      "collectTransactionFees((uint256,uint256,address,address,address,uint256,uint256,uint256)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__collectTransactionFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  deleverage(
    param: TimeswapV2Pool__deleverageInputParamStruct
  ): TimeswapV2Pool__deleverageResult {
    let result = super.call(
      "deleverage",
      "deleverage((uint256,uint256,address,uint8,uint256,bytes)):(uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );

    return new TimeswapV2Pool__deleverageResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  try_deleverage(
    param: TimeswapV2Pool__deleverageInputParamStruct
  ): ethereum.CallResult<TimeswapV2Pool__deleverageResult> {
    let result = super.tryCall(
      "deleverage",
      "deleverage((uint256,uint256,address,uint8,uint256,bytes)):(uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__deleverageResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes()
      )
    );
  }

  deleverage1(
    param: TimeswapV2Pool__deleverage1InputParamStruct,
    durationForward: BigInt
  ): TimeswapV2Pool__deleverage1Result {
    let result = super.call(
      "deleverage",
      "deleverage((uint256,uint256,address,uint8,uint256,bytes),uint96):(uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );

    return new TimeswapV2Pool__deleverage1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  try_deleverage1(
    param: TimeswapV2Pool__deleverage1InputParamStruct,
    durationForward: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__deleverage1Result> {
    let result = super.tryCall(
      "deleverage",
      "deleverage((uint256,uint256,address,uint8,uint256,bytes),uint96):(uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__deleverage1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes()
      )
    );
  }

  feeGrowth(strike: BigInt, maturity: BigInt): TimeswapV2Pool__feeGrowthResult {
    let result = super.call(
      "feeGrowth",
      "feeGrowth(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );

    return new TimeswapV2Pool__feeGrowthResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_feeGrowth(
    strike: BigInt,
    maturity: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__feeGrowthResult> {
    let result = super.tryCall(
      "feeGrowth",
      "feeGrowth(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__feeGrowthResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  feesEarnedOf(
    strike: BigInt,
    maturity: BigInt,
    owner: Address
  ): TimeswapV2Pool__feesEarnedOfResult {
    let result = super.call(
      "feesEarnedOf",
      "feesEarnedOf(uint256,uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return new TimeswapV2Pool__feesEarnedOfResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_feesEarnedOf(
    strike: BigInt,
    maturity: BigInt,
    owner: Address
  ): ethereum.CallResult<TimeswapV2Pool__feesEarnedOfResult> {
    let result = super.tryCall(
      "feesEarnedOf",
      "feesEarnedOf(uint256,uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__feesEarnedOfResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getByIndex(id: BigInt): TimeswapV2Pool__getByIndexResultValue0Struct {
    let result = super.call(
      "getByIndex",
      "getByIndex(uint256):((uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<TimeswapV2Pool__getByIndexResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getByIndex(
    id: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__getByIndexResultValue0Struct> {
    let result = super.tryCall(
      "getByIndex",
      "getByIndex(uint256):((uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TimeswapV2Pool__getByIndexResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  leverage(
    param: TimeswapV2Pool__leverageInputParamStruct,
    durationForward: BigInt
  ): TimeswapV2Pool__leverageResult {
    let result = super.call(
      "leverage",
      "leverage((uint256,uint256,address,address,uint8,uint256,bytes),uint96):(uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );

    return new TimeswapV2Pool__leverageResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  try_leverage(
    param: TimeswapV2Pool__leverageInputParamStruct,
    durationForward: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__leverageResult> {
    let result = super.tryCall(
      "leverage",
      "leverage((uint256,uint256,address,address,uint8,uint256,bytes),uint96):(uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__leverageResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes()
      )
    );
  }

  leverage1(
    param: TimeswapV2Pool__leverage1InputParamStruct
  ): TimeswapV2Pool__leverage1Result {
    let result = super.call(
      "leverage",
      "leverage((uint256,uint256,address,address,uint8,uint256,bytes)):(uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );

    return new TimeswapV2Pool__leverage1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  try_leverage1(
    param: TimeswapV2Pool__leverage1InputParamStruct
  ): ethereum.CallResult<TimeswapV2Pool__leverage1Result> {
    let result = super.tryCall(
      "leverage",
      "leverage((uint256,uint256,address,address,uint8,uint256,bytes)):(uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__leverage1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes()
      )
    );
  }

  liquidityOf(strike: BigInt, maturity: BigInt, owner: Address): BigInt {
    let result = super.call(
      "liquidityOf",
      "liquidityOf(uint256,uint256,address):(uint160)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidityOf(
    strike: BigInt,
    maturity: BigInt,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityOf",
      "liquidityOf(uint256,uint256,address):(uint160)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    param: TimeswapV2Pool__mintInputParamStruct,
    durationForward: BigInt
  ): TimeswapV2Pool__mintResult {
    let result = super.call(
      "mint",
      "mint((uint256,uint256,address,uint8,uint256,bytes),uint96):(uint160,uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );

    return new TimeswapV2Pool__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes()
    );
  }

  try_mint(
    param: TimeswapV2Pool__mintInputParamStruct,
    durationForward: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint((uint256,uint256,address,uint8,uint256,bytes),uint96):(uint160,uint256,uint256,uint256,bytes)",
      [
        ethereum.Value.fromTuple(param),
        ethereum.Value.fromUnsignedBigInt(durationForward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes()
      )
    );
  }

  mint1(
    param: TimeswapV2Pool__mint1InputParamStruct
  ): TimeswapV2Pool__mint1Result {
    let result = super.call(
      "mint",
      "mint((uint256,uint256,address,uint8,uint256,bytes)):(uint160,uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );

    return new TimeswapV2Pool__mint1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes()
    );
  }

  try_mint1(
    param: TimeswapV2Pool__mint1InputParamStruct
  ): ethereum.CallResult<TimeswapV2Pool__mint1Result> {
    let result = super.tryCall(
      "mint",
      "mint((uint256,uint256,address,uint8,uint256,bytes)):(uint160,uint256,uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__mint1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes()
      )
    );
  }

  numberOfPools(): BigInt {
    let result = super.call("numberOfPools", "numberOfPools():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numberOfPools(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfPools",
      "numberOfPools():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionPair(): Address {
    let result = super.call("optionPair", "optionPair():(address)", []);

    return result[0].toAddress();
  }

  try_optionPair(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionPair", "optionPair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolFactory(): Address {
    let result = super.call("poolFactory", "poolFactory():(address)", []);

    return result[0].toAddress();
  }

  try_poolFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolFactory", "poolFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeesEarned(
    strike: BigInt,
    maturity: BigInt
  ): TimeswapV2Pool__protocolFeesEarnedResult {
    let result = super.call(
      "protocolFeesEarned",
      "protocolFeesEarned(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );

    return new TimeswapV2Pool__protocolFeesEarnedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_protocolFeesEarned(
    strike: BigInt,
    maturity: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__protocolFeesEarnedResult> {
    let result = super.tryCall(
      "protocolFeesEarned",
      "protocolFeesEarned(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__protocolFeesEarnedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  rebalance(
    param: TimeswapV2Pool__rebalanceInputParamStruct
  ): TimeswapV2Pool__rebalanceResult {
    let result = super.call(
      "rebalance",
      "rebalance((uint256,uint256,address,bool,uint8,uint256,bytes)):(uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );

    return new TimeswapV2Pool__rebalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes()
    );
  }

  try_rebalance(
    param: TimeswapV2Pool__rebalanceInputParamStruct
  ): ethereum.CallResult<TimeswapV2Pool__rebalanceResult> {
    let result = super.tryCall(
      "rebalance",
      "rebalance((uint256,uint256,address,bool,uint8,uint256,bytes)):(uint256,uint256,bytes)",
      [ethereum.Value.fromTuple(param)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__rebalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes()
      )
    );
  }

  sqrtInterestRate(strike: BigInt, maturity: BigInt): BigInt {
    let result = super.call(
      "sqrtInterestRate",
      "sqrtInterestRate(uint256,uint256):(uint160)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );

    return result[0].toBigInt();
  }

  try_sqrtInterestRate(
    strike: BigInt,
    maturity: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sqrtInterestRate",
      "sqrtInterestRate(uint256,uint256):(uint160)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLiquidity(strike: BigInt, maturity: BigInt): BigInt {
    let result = super.call(
      "totalLiquidity",
      "totalLiquidity(uint256,uint256):(uint160)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalLiquidity(
    strike: BigInt,
    maturity: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLiquidity",
      "totalLiquidity(uint256,uint256):(uint160)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLongBalance(
    strike: BigInt,
    maturity: BigInt
  ): TimeswapV2Pool__totalLongBalanceResult {
    let result = super.call(
      "totalLongBalance",
      "totalLongBalance(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );

    return new TimeswapV2Pool__totalLongBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalLongBalance(
    strike: BigInt,
    maturity: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__totalLongBalanceResult> {
    let result = super.tryCall(
      "totalLongBalance",
      "totalLongBalance(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__totalLongBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalLongBalanceAdjustFees(
    strike: BigInt,
    maturity: BigInt
  ): TimeswapV2Pool__totalLongBalanceAdjustFeesResult {
    let result = super.call(
      "totalLongBalanceAdjustFees",
      "totalLongBalanceAdjustFees(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );

    return new TimeswapV2Pool__totalLongBalanceAdjustFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalLongBalanceAdjustFees(
    strike: BigInt,
    maturity: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__totalLongBalanceAdjustFeesResult> {
    let result = super.tryCall(
      "totalLongBalanceAdjustFees",
      "totalLongBalanceAdjustFees(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__totalLongBalanceAdjustFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalPositions(
    strike: BigInt,
    maturity: BigInt
  ): TimeswapV2Pool__totalPositionsResult {
    let result = super.call(
      "totalPositions",
      "totalPositions(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );

    return new TimeswapV2Pool__totalPositionsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalPositions(
    strike: BigInt,
    maturity: BigInt
  ): ethereum.CallResult<TimeswapV2Pool__totalPositionsResult> {
    let result = super.tryCall(
      "totalPositions",
      "totalPositions(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(strike),
        ethereum.Value.fromUnsignedBigInt(maturity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2Pool__totalPositionsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  transactionFee(): BigInt {
    let result = super.call("transactionFee", "transactionFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_transactionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transactionFee",
      "transactionFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddFeesCall extends ethereum.Call {
  get inputs(): AddFeesCall__Inputs {
    return new AddFeesCall__Inputs(this);
  }

  get outputs(): AddFeesCall__Outputs {
    return new AddFeesCall__Outputs(this);
  }
}

export class AddFeesCall__Inputs {
  _call: AddFeesCall;

  constructor(call: AddFeesCall) {
    this._call = call;
  }

  get param(): AddFeesCallParamStruct {
    return changetype<AddFeesCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AddFeesCall__Outputs {
  _call: AddFeesCall;

  constructor(call: AddFeesCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AddFeesCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get long0Fees(): BigInt {
    return this[3].toBigInt();
  }

  get long1Fees(): BigInt {
    return this[4].toBigInt();
  }

  get shortFees(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get param(): BurnCallParamStruct {
    return changetype<BurnCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get durationForward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get liquidityAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[4].value.toBytes();
  }
}

export class BurnCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get transaction(): i32 {
    return this[5].toI32();
  }

  get delta(): BigInt {
    return this[6].toBigInt();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class Burn1Call extends ethereum.Call {
  get inputs(): Burn1Call__Inputs {
    return new Burn1Call__Inputs(this);
  }

  get outputs(): Burn1Call__Outputs {
    return new Burn1Call__Outputs(this);
  }
}

export class Burn1Call__Inputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }

  get param(): Burn1CallParamStruct {
    return changetype<Burn1CallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class Burn1Call__Outputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }

  get liquidityAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[4].value.toBytes();
  }
}

export class Burn1CallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get transaction(): i32 {
    return this[5].toI32();
  }

  get delta(): BigInt {
    return this[6].toBigInt();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class CollectProtocolFeesCall extends ethereum.Call {
  get inputs(): CollectProtocolFeesCall__Inputs {
    return new CollectProtocolFeesCall__Inputs(this);
  }

  get outputs(): CollectProtocolFeesCall__Outputs {
    return new CollectProtocolFeesCall__Outputs(this);
  }
}

export class CollectProtocolFeesCall__Inputs {
  _call: CollectProtocolFeesCall;

  constructor(call: CollectProtocolFeesCall) {
    this._call = call;
  }

  get param(): CollectProtocolFeesCallParamStruct {
    return changetype<CollectProtocolFeesCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectProtocolFeesCall__Outputs {
  _call: CollectProtocolFeesCall;

  constructor(call: CollectProtocolFeesCall) {
    this._call = call;
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class CollectProtocolFeesCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get long0Requested(): BigInt {
    return this[5].toBigInt();
  }

  get long1Requested(): BigInt {
    return this[6].toBigInt();
  }

  get shortRequested(): BigInt {
    return this[7].toBigInt();
  }
}

export class CollectTransactionFeesCall extends ethereum.Call {
  get inputs(): CollectTransactionFeesCall__Inputs {
    return new CollectTransactionFeesCall__Inputs(this);
  }

  get outputs(): CollectTransactionFeesCall__Outputs {
    return new CollectTransactionFeesCall__Outputs(this);
  }
}

export class CollectTransactionFeesCall__Inputs {
  _call: CollectTransactionFeesCall;

  constructor(call: CollectTransactionFeesCall) {
    this._call = call;
  }

  get param(): CollectTransactionFeesCallParamStruct {
    return changetype<CollectTransactionFeesCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectTransactionFeesCall__Outputs {
  _call: CollectTransactionFeesCall;

  constructor(call: CollectTransactionFeesCall) {
    this._call = call;
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class CollectTransactionFeesCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get shortTo(): Address {
    return this[4].toAddress();
  }

  get long0Requested(): BigInt {
    return this[5].toBigInt();
  }

  get long1Requested(): BigInt {
    return this[6].toBigInt();
  }

  get shortRequested(): BigInt {
    return this[7].toBigInt();
  }
}

export class DeleverageCall extends ethereum.Call {
  get inputs(): DeleverageCall__Inputs {
    return new DeleverageCall__Inputs(this);
  }

  get outputs(): DeleverageCall__Outputs {
    return new DeleverageCall__Outputs(this);
  }
}

export class DeleverageCall__Inputs {
  _call: DeleverageCall;

  constructor(call: DeleverageCall) {
    this._call = call;
  }

  get param(): DeleverageCallParamStruct {
    return changetype<DeleverageCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DeleverageCall__Outputs {
  _call: DeleverageCall;

  constructor(call: DeleverageCall) {
    this._call = call;
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[3].value.toBytes();
  }
}

export class DeleverageCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class Deleverage1Call extends ethereum.Call {
  get inputs(): Deleverage1Call__Inputs {
    return new Deleverage1Call__Inputs(this);
  }

  get outputs(): Deleverage1Call__Outputs {
    return new Deleverage1Call__Outputs(this);
  }
}

export class Deleverage1Call__Inputs {
  _call: Deleverage1Call;

  constructor(call: Deleverage1Call) {
    this._call = call;
  }

  get param(): Deleverage1CallParamStruct {
    return changetype<Deleverage1CallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get durationForward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Deleverage1Call__Outputs {
  _call: Deleverage1Call;

  constructor(call: Deleverage1Call) {
    this._call = call;
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[3].value.toBytes();
  }
}

export class Deleverage1CallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get strike(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LeverageCall extends ethereum.Call {
  get inputs(): LeverageCall__Inputs {
    return new LeverageCall__Inputs(this);
  }

  get outputs(): LeverageCall__Outputs {
    return new LeverageCall__Outputs(this);
  }
}

export class LeverageCall__Inputs {
  _call: LeverageCall;

  constructor(call: LeverageCall) {
    this._call = call;
  }

  get param(): LeverageCallParamStruct {
    return changetype<LeverageCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get durationForward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LeverageCall__Outputs {
  _call: LeverageCall;

  constructor(call: LeverageCall) {
    this._call = call;
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[3].value.toBytes();
  }
}

export class LeverageCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get transaction(): i32 {
    return this[4].toI32();
  }

  get delta(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class Leverage1Call extends ethereum.Call {
  get inputs(): Leverage1Call__Inputs {
    return new Leverage1Call__Inputs(this);
  }

  get outputs(): Leverage1Call__Outputs {
    return new Leverage1Call__Outputs(this);
  }
}

export class Leverage1Call__Inputs {
  _call: Leverage1Call;

  constructor(call: Leverage1Call) {
    this._call = call;
  }

  get param(): Leverage1CallParamStruct {
    return changetype<Leverage1CallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class Leverage1Call__Outputs {
  _call: Leverage1Call;

  constructor(call: Leverage1Call) {
    this._call = call;
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[3].value.toBytes();
  }
}

export class Leverage1CallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get long0To(): Address {
    return this[2].toAddress();
  }

  get long1To(): Address {
    return this[3].toAddress();
  }

  get transaction(): i32 {
    return this[4].toI32();
  }

  get delta(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get param(): MintCallParamStruct {
    return changetype<MintCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get durationForward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get liquidityAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[4].value.toBytes();
  }
}

export class MintCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get param(): Mint1CallParamStruct {
    return changetype<Mint1CallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get liquidityAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get shortAmount(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[4].value.toBytes();
  }
}

export class Mint1CallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get transaction(): i32 {
    return this[3].toI32();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get param(): RebalanceCallParamStruct {
    return changetype<RebalanceCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get long0Amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get long1Amount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class RebalanceCallParamStruct extends ethereum.Tuple {
  get strike(): BigInt {
    return this[0].toBigInt();
  }

  get maturity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get isLong0ToLong1(): boolean {
    return this[3].toBoolean();
  }

  get transaction(): i32 {
    return this[4].toI32();
  }

  get delta(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class TransferFeesCall extends ethereum.Call {
  get inputs(): TransferFeesCall__Inputs {
    return new TransferFeesCall__Inputs(this);
  }

  get outputs(): TransferFeesCall__Outputs {
    return new TransferFeesCall__Outputs(this);
  }
}

export class TransferFeesCall__Inputs {
  _call: TransferFeesCall;

  constructor(call: TransferFeesCall) {
    this._call = call;
  }

  get strike(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get long0Fees(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get long1Fees(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get shortFees(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class TransferFeesCall__Outputs {
  _call: TransferFeesCall;

  constructor(call: TransferFeesCall) {
    this._call = call;
  }
}

export class TransferLiquidityCall extends ethereum.Call {
  get inputs(): TransferLiquidityCall__Inputs {
    return new TransferLiquidityCall__Inputs(this);
  }

  get outputs(): TransferLiquidityCall__Outputs {
    return new TransferLiquidityCall__Outputs(this);
  }
}

export class TransferLiquidityCall__Inputs {
  _call: TransferLiquidityCall;

  constructor(call: TransferLiquidityCall) {
    this._call = call;
  }

  get strike(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get liquidityAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferLiquidityCall__Outputs {
  _call: TransferLiquidityCall;

  constructor(call: TransferLiquidityCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get strike(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maturity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}
