// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptOwner extends ethereum.Event {
  get params(): AcceptOwner__Params {
    return new AcceptOwner__Params(this);
  }
}

export class AcceptOwner__Params {
  _event: AcceptOwner;

  constructor(event: AcceptOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get option(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolPair(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetOwner extends ethereum.Event {
  get params(): SetOwner__Params {
    return new SetOwner__Params(this);
  }
}

export class SetOwner__Params {
  _event: SetOwner;

  constructor(event: SetOwner) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TimeswapV2PoolFactory__parameterResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getPoolFactory(): Address {
    return this.value0;
  }

  getOptionPair(): Address {
    return this.value1;
  }

  getTransactionFee(): BigInt {
    return this.value2;
  }

  getProtocolFee(): BigInt {
    return this.value3;
  }
}

export class TimeswapV2PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): TimeswapV2PoolFactory {
    return new TimeswapV2PoolFactory("TimeswapV2PoolFactory", address);
  }

  create(optionPair: Address): Address {
    let result = super.call("create", "create(address):(address)", [
      ethereum.Value.fromAddress(optionPair)
    ]);

    return result[0].toAddress();
  }

  try_create(optionPair: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("create", "create(address):(address)", [
      ethereum.Value.fromAddress(optionPair)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  get(optionPair: Address): Address {
    let result = super.call("get", "get(address):(address)", [
      ethereum.Value.fromAddress(optionPair)
    ]);

    return result[0].toAddress();
  }

  try_get(optionPair: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("get", "get(address):(address)", [
      ethereum.Value.fromAddress(optionPair)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getByIndex(param0: BigInt): Address {
    let result = super.call("getByIndex", "getByIndex(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_getByIndex(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getByIndex", "getByIndex(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numberOfPairs(): BigInt {
    let result = super.call("numberOfPairs", "numberOfPairs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numberOfPairs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfPairs",
      "numberOfPairs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parameter(): TimeswapV2PoolFactory__parameterResult {
    let result = super.call(
      "parameter",
      "parameter():(address,address,uint256,uint256)",
      []
    );

    return new TimeswapV2PoolFactory__parameterResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_parameter(): ethereum.CallResult<TimeswapV2PoolFactory__parameterResult> {
    let result = super.tryCall(
      "parameter",
      "parameter():(address,address,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeswapV2PoolFactory__parameterResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transactionFee(): BigInt {
    let result = super.call("transactionFee", "transactionFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_transactionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transactionFee",
      "transactionFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get chosenOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get chosenTransactionFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get chosenProtocolFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnerCall extends ethereum.Call {
  get inputs(): AcceptOwnerCall__Inputs {
    return new AcceptOwnerCall__Inputs(this);
  }

  get outputs(): AcceptOwnerCall__Outputs {
    return new AcceptOwnerCall__Outputs(this);
  }
}

export class AcceptOwnerCall__Inputs {
  _call: AcceptOwnerCall;

  constructor(call: AcceptOwnerCall) {
    this._call = call;
  }
}

export class AcceptOwnerCall__Outputs {
  _call: AcceptOwnerCall;

  constructor(call: AcceptOwnerCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get optionPair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetPendingOwnerCall extends ethereum.Call {
  get inputs(): SetPendingOwnerCall__Inputs {
    return new SetPendingOwnerCall__Inputs(this);
  }

  get outputs(): SetPendingOwnerCall__Outputs {
    return new SetPendingOwnerCall__Outputs(this);
  }
}

export class SetPendingOwnerCall__Inputs {
  _call: SetPendingOwnerCall;

  constructor(call: SetPendingOwnerCall) {
    this._call = call;
  }

  get chosenPendingOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPendingOwnerCall__Outputs {
  _call: SetPendingOwnerCall;

  constructor(call: SetPendingOwnerCall) {
    this._call = call;
  }
}
